## Git commands:
Show the commits made in this repository, starting with the most recent
$ git log

Temporarily reset all files in a directory to their state at the time of a specific commit.
$ git checkout 3884eab839af1e82c44267484cf2945a766081f3

Compare tow commits, printing each line that is present in one commit but not in the other:
$ git diff new old
$ git diff 746f762e38b5bbb7d0b837464ef6ec3f8ee5bf91 003c8c197cd3b1e5b28b58f53ee14d7ebaa9bb3a

Make a copy of an entire Git repository, including the history, into your own computer
$ git clone

Start a new repository: Only files from that directory (and subdirectories inside that directory)
will be contained in that repository, and you can have different repositories in different directories.
$ git init

See current tracking of files
$ git status

Back to the most recent commit:
$ git checkout 3884eab839af1e82c44267484cf2945a766081f3



$ git log           : Show the commits made in this repository, starting with the most recent
$ git checkout xxx  : Temporarily reset all files in a directory to their state at the time of a specific commit.
$ git diff new old  : Compare tow commits, printing each line that is present in one commit but not in the other:
$ git clone         : Make a copy of an entire Git repository, including the history, into your own computer
$ git init          : Start a new repository: Only files from that directory (and subdirectories) will be contained
$ git status        : See current tracking of files
$ git add cake.txt  : initial add to staging area
$ git commit -m "first two recipes committed"
$ git branch xxx    : create a new branch
$ git diff --staged : difference between staged and committed
$ git reset --hard  : remove files from staging area not committed yet
$ git checkout easy-mode : switch branch
$ git checkout -b new_branch_name:
$ git show 4035769377cce96a88d5c1167079e12f30492391 : show diff to parent
$ git branch -d coins : deleting an obsolute branch

## Shortcuts
See hidden files (incl .git directory)
$ ls -a
$ git diff          : shows the most recent changes


## Go o a branch
git branch          : check where you are
git checkout master : go to a specific branch

## Merge two branches
$ git add game.js
$ git commit -m "delaybeforebullet424"
$ git merge master coins

## Add and commit changes
$ git add game.js
$ git commit -m "make coins yellow"

## switch to easy mode and check master in too easy-mode
$ git checkout easy-mode
$ git merge master easy-mode
## there is a conflict ; go in and manually resolve the conflict
$ git add game.js
$ git commit
$ git log -n 1







How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Fill in your answer here

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Fill in your answer here

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Fill in your answer here

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Fill in your answer here

How can you use the commands git log and git diff to view the history of files?

    Fill in your answer here

How might using version control make you more confident to make changes that
could break something?

    Fill in your answer here

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here
